Manage networks
================
Commands:
  connect     Connect a container to a network
  create      Create a network
  disconnect  Disconnect a container from a network
  inspect     Display detailed information on one or more networks
  ls          List networks
  prune       Remove all unused networks
  rm          Remove one or more networks



docker network ls

NETWORK ID          NAME                DRIVER              SCOPE
33d14a88f43f        bridge              bridge              local
45d14a88f43f        host                host                local
46d14a88f43f        none                none                local



Containers in default bridge Network
=====================================

docker run --name centos-1 -it centos bash

docker run --name centos-2 -it centos bash


docker ls
docker inspect bridge


Containers in custom bridge Network
=====================================

docker network create myNetwork

docker run --name centos-1 -net myNetwork -it centos bash

docker run --name centos-2 -net myNetwork -it centos bash




Containers in host  Network
=====================================

docker network create myNetwork

docker run --name centos-3 -net host -it centos bash

docker run --name centos-4 -net host -it centos bash


Docker Swarm
============
A Docker Swarm is a group of either physical or virtual machines that are running the 
Docker application and that have been configured to join together in a cluster.
Docker swarm is a container orchestration tool, meaning that it allows the user
to manage multiple containers deployed across multiple host machines.

To Create Swarm Cluster
=========================
$ docker swarm init --advertise-addr=192.168.0.18

Swarm initialized: current node (fe9nz97mhl4pasmewsyjczlqb) is now a manager.
To add a worker to this swarm, run the following command:

docker swarm join --token SWMTKN-1-0k8cln5ifhaw9bqtjzwdvlptpgt7yollbhbrb0iecpb3no8yd9-0qdpx13zctp93enffe9si4im1 192.168.0.18:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.

[node1] (local) root@192.168.0.18 ~
$ 

Manage Swarm
=============

Commands:
  ca          Display and rotate the root CA
  init        Initialize a swarm
  join        Join a swarm as a node and/or manager
  join-token  Manage join tokens
  leave       Leave the swarm
  unlock      Unlock swarm
  unlock-key  Manage the unlock key
  update      Update the swarm



Manage services
=================

Commands:
  create      Create a new service
  inspect     Display detailed information on one or more services
  logs        Fetch the logs of a service or task
  ls          List services
  ps          List the tasks of one or more services
  rm          Remove one or more services
  rollback    Revert changes to a service's configuration
  scale       Scale one or multiple replicated services
  update      Update a service



 docker service create --replicas 5 --name p-nginx -p 1111:80 nginx





Manage Swarm nodes
================

Commands:
  demote      Demote one or more nodes from manager in the swarm
  inspect     Display detailed information on one or more nodes
  ls          List nodes in the swarm
  promote     Promote one or more nodes to manager in the swarm
  ps          List tasks running on one or more nodes, defaults to current node
  rm          Remove one or more nodes from the swarm
  update      Update a node


To monitor Swarm cluster
========================

https://github.com/imixs/imixs-cloud/tree/docker-swarm


Docker file for  Angular or Node JS application
================================================
FROM node:10

# Create app directory
WORKDIR /usr/src/app

# Install app dependencies
# A wildcard is used to ensure both package.json AND package-lock.json are copied
# where available (npm@5+)
COPY package*.json ./

RUN npm install
# If you are building your code for production
# RUN npm ci --only=production

# Bundle app source
COPY . .

EXPOSE 3000
CMD [ "npm", "start" ]


Docker File Spring Boot Java Application
=========================================
FROM openjdk:8
ADD target/docker-spring-boot.jar docker-spring-boot.jar
EXPOSE 8080
ENTRYPOINT ["java","-jar","docker-spring-boot.jar"]



Dokcer Compose  (Spring Boot + MySQL)
=====================================
version: '3.3'

services:
   database:
     image: pradeepch82/ems-mysql:1.1
     volumes:
       - db_data:/var/lib/mysql
     restart: always
   ems-spring-boot:
     depends_on:
       - database
     image: pradeepch82/pvc-spring-boot-ems:1.1
     ports:
       - "1212:8080"
     restart: always
     
volumes:
    db_data: {}



Dokcer Compose  (Expres JS + MySQL)
=====================================
version: '3.3'

services:
   database:
     image: pradeepch82/ems-mysql:1.1
     volumes:
       - db_data:/var/lib/mysql
     restart: always
   express-ems-app:
     depends_on:
       - database
     image: pradeepch82/express-ems-app:1.2
     ports:
       - "3000:3000"
     restart: always
     
volumes:
    db_data: {}





Docker Compose for (Angular + Spring Boot + MySQL)
===================================================
Dokcer Compose  (Spring Boot + MySQL)
=====================================
version: '3.3'

services:
   database:
     image: pradeepch82/ems-mysql:1.1
     volumes:
       - db_data:/var/lib/mysql
     restart: always
   ems-spring-boot:
     depends_on:
       - database
     image: pradeepch82/pvc-spring-boot-ems:1.2
     ports:
       - "1212:8080"
     restart: always
   ems-angular-app:
     depends_on:
       - ems-spring-boot
     image: pradeepch82/ems-angular-app:1.1
     ports:
       - "4211:80"
     restart: always
     
volumes:
    db_data: {}















Linking the containers (wordpress with MySQL)
==================================================
docker pull mysql

docker run --name p-mysql -e MYSQL_ROOT_PASSWORD=admin  -d mysql

docker pull wordpress

docker run --name p-wordpress --link p-mysql:mysql -p 8888:80 -d wordpress


day2
=====
docker-compose.yml
=====================
version: '3.3'

services:
   db:
     image: mysql:5.7
     volumes:
       - db_data:/var/lib/mysql
     restart: always
     environment:
       MYSQL_ROOT_PASSWORD: somewordpress
       MYSQL_DATABASE: wordpress
       MYSQL_USER: wordpress
       MYSQL_PASSWORD: wordpress

   wordpress:
     depends_on:
       - db
     image: wordpress:latest
     ports:
       - "8000:80"
     restart: always
     environment:
       WORDPRESS_DB_HOST: db:3306
       WORDPRESS_DB_USER: wordpress
       WORDPRESS_DB_PASSWORD: wordpress
       WORDPRESS_DB_NAME: wordpress
volumes:
    db_data: {}

 
docker-compose up -d










